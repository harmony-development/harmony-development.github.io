<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Harmony</title>
    <link>https://harmonyapp.io/</link>
    <description>Recent content on Harmony</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 29 Jun 2020 21:07:15 -0400</lastBuildDate><atom:link href="https://harmonyapp.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://harmonyapp.io/protocol/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://harmonyapp.io/protocol/readme/</guid>
      <description>Harmony Protocol This is the repository containing the Harmony protocol specification and documentation.
Read here for frequently asked questions.
To read about protocol conventions, please read GUIDELINES.
If you are looking for:
 a client to communicate with, check out Tempest, Challah or Crust. a server to host, check out Scherzo. an SDK to develop bots / clients / servers with, check out Rust SDK, Web SDK and C++ SDK.  </description>
    </item>
    
    <item>
      <title>Harmony FAQ</title>
      <link>https://harmonyapp.io/docs/faq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://harmonyapp.io/docs/faq/</guid>
      <description>What is Harmony? A chat protocol which:
 is split into communities which contain channels which contain messages is defined entirely within the Protobuf format, using a simple RPC mechanism called hRPC.  What are the design goals of Harmony? Harmony&amp;rsquo;s protocol is designed to be as straightforward and pragmatic as possible. We do not make attempts at creating a &amp;ldquo;universal&amp;rdquo; design philosophy which the entire protocol is forced to follow, instead implementing things that make sense as a single cohesive system.</description>
    </item>
    
    <item>
      <title>Harmony FAQ</title>
      <link>https://harmonyapp.io/protocol/faq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://harmonyapp.io/protocol/faq/</guid>
      <description>What is Harmony? A chat protocol which:
 is split into communities which contain channels which contain messages is defined entirely within the Protobuf format, using a simple RPC mechanism called hRPC.  What are the design goals of Harmony? Harmony&amp;rsquo;s protocol is designed to be as straightforward and pragmatic as possible. We do not make attempts at creating a &amp;ldquo;universal&amp;rdquo; design philosophy which the entire protocol is forced to follow, instead implementing things that make sense as a single cohesive system.</description>
    </item>
    
    <item>
      <title>Permissions</title>
      <link>https://harmonyapp.io/docs/permissions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://harmonyapp.io/docs/permissions/</guid>
      <description>The permissions system of Harmony resembles that of the permissions system common to open-source Minecraft server software, featuring rules and querying a node string against those rules.
Permission In a community, there will be features, management functionality, bot commands, and other things which exist. Most of these actions have a permission associated with them, allowing you to control which members have access to each feature.
A permission is just a string, such as roles.</description>
    </item>
    
    <item>
      <title>Permissions</title>
      <link>https://harmonyapp.io/protocol/chat/v1/permissions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://harmonyapp.io/protocol/chat/v1/permissions/</guid>
      <description>The permissions system of Harmony resembles that of the permissions system common to open-source Minecraft server software, featuring rules and querying a node string against those rules.
Permission In a community, there will be features, management functionality, bot commands, and other things which exist. Most of these actions have a permission associated with them, allowing you to control which members have access to each feature.
A permission is just a string, such as roles.</description>
    </item>
    
    <item>
      <title>Protocol Guidelines</title>
      <link>https://harmonyapp.io/docs/guidelines/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://harmonyapp.io/docs/guidelines/</guid>
      <description>Protocol endpoints adhere to the following standard naming conventions:
  All actions being applied must be prefixed.
❌ What not to do:
 rpc ProfileUpdate(ProfileUpdateRequest) returns (ProfileUpdateResponse) {}  ✅ What to do:
 rpc UpdateProfile(UpdateProfileRequest) returns (UpdateProfileResponse) {}    Objects (types that aren&amp;rsquo;t request or response types) should go at the top of the file.
  Objects should not be nested inside request or response types.</description>
    </item>
    
    <item>
      <title>Protocol Guidelines</title>
      <link>https://harmonyapp.io/protocol/guidelines/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://harmonyapp.io/protocol/guidelines/</guid>
      <description>Protocol endpoints adhere to the following standard naming conventions:
  All actions being applied must be prefixed.
❌ What not to do:
 rpc ProfileUpdate(ProfileUpdateRequest) returns (ProfileUpdateResponse) {}  ✅ What to do:
 rpc UpdateProfile(UpdateProfileRequest) returns (UpdateProfileResponse) {}    Objects (types that aren&amp;rsquo;t request or response types) should go at the top of the file.
  Objects should not be nested inside request or response types.</description>
    </item>
    
    <item>
      <title>Reference: google.protobuf</title>
      <link>https://harmonyapp.io/docs/google.protobuf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://harmonyapp.io/docs/google.protobuf/</guid>
      <description>Message Types FileDescriptorSet Fields
   Name Type     file google.protobuf.FileDescriptorProto    FileDescriptorProto Fields
   Name Type     name string   package string   dependency string   public_dependency int32   weak_dependency int32   message_type google.protobuf.DescriptorProto   enum_type google.protobuf.EnumDescriptorProto   service google.protobuf.ServiceDescriptorProto   extension google.protobuf.FieldDescriptorProto   options google.protobuf.FileOptions   source_code_info google.</description>
    </item>
    
    <item>
      <title>Reference: protocol.auth.v1</title>
      <link>https://harmonyapp.io/docs/protocol.auth.v1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://harmonyapp.io/docs/protocol.auth.v1/</guid>
      <description>Message Types BeginAuthRequest Fields
   Name Type    BeginAuthResponse Fields
   Name Type     auth_id string    Session Fields
   Name Type     user_id uint64   session_token string    AuthStep Fields
   Name Type     fallback_url string   can_go_back bool   choice protocol.auth.v1.AuthStep.Choice   form protocol.</description>
    </item>
    
    <item>
      <title>Reference: protocol.batch.v1</title>
      <link>https://harmonyapp.io/docs/protocol.batch.v1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://harmonyapp.io/docs/protocol.batch.v1/</guid>
      <description>Message Types AnyRequest Fields
   Name Type     endpoint string   request bytes    BatchRequest Fields
   Name Type     requests protocol.batch.v1.AnyRequest    BatchResponse Fields
   Name Type     responses bytes    BatchSameRequest Fields
   Name Type     endpoint string   requests bytes    BatchSameResponse Fields</description>
    </item>
    
    <item>
      <title>Reference: protocol.chat.v1</title>
      <link>https://harmonyapp.io/docs/protocol.chat.v1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://harmonyapp.io/docs/protocol.chat.v1/</guid>
      <description>Message Types GetUserRequest Fields
   Name Type     user_id uint64    GetUserResponse Fields
   Name Type     user_name string   user_avatar string   UNHANDLED TYPE   is_bot bool    GetUserBulkRequest Fields
   Name Type     user_ids uint64    GetUserBulkResponse Fields
   Name Type     users protocol.</description>
    </item>
    
    <item>
      <title>Reference: protocol.harmonytypes.v1</title>
      <link>https://harmonyapp.io/docs/protocol.harmonytypes.v1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://harmonyapp.io/docs/protocol.harmonytypes.v1/</guid>
      <description>Message Types HarmonyMethodMetadata Fields
   Name Type     requires_authentication bool   requires_local bool   requires_permission_node string    Anything Fields
   Name Type     kind string   body bytes    Metadata Fields
   Name Type     kind string   extension protocol.harmonytypes.v1.Metadata.ExtensionEntry    Error Fields
   Name Type     identifier string   human_message string   more_details bytes    Token Fields</description>
    </item>
    
    <item>
      <title>Reference: protocol.mediaproxy.v1</title>
      <link>https://harmonyapp.io/docs/protocol.mediaproxy.v1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://harmonyapp.io/docs/protocol.mediaproxy.v1/</guid>
      <description>Message Types SiteMetadata Fields
   Name Type     site_title string   page_title string   kind string   description string   url string   image string    MediaMetadata Fields
   Name Type     mimetype string   filename string    FetchLinkMetadataRequest Fields
   Name Type     url string    FetchLinkMetadataResponse Fields</description>
    </item>
    
    <item>
      <title>Reference: protocol.sync.v1</title>
      <link>https://harmonyapp.io/docs/protocol.sync.v1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://harmonyapp.io/docs/protocol.sync.v1/</guid>
      <description>Message Types AuthData Fields
   Name Type     server_id string   time uint64    Event Fields
   Name Type     user_removed_from_guild protocol.sync.v1.Event.UserRemovedFromGuild   user_added_to_guild protocol.sync.v1.Event.UserAddedToGuild    PullRequest Fields
   Name Type    PullResponse Fields
   Name Type     event_queue protocol.sync.v1.Event    PushRequest Fields</description>
    </item>
    
    <item>
      <title>Reference: protocol.voice.v1</title>
      <link>https://harmonyapp.io/docs/protocol.voice.v1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://harmonyapp.io/docs/protocol.voice.v1/</guid>
      <description>Message Types Signal Fields
   Name Type     ice_candidate string   renegotiation_needed protocol.harmonytypes.v1.Empty    ConnectRequest Fields
   Name Type     guild_id uint64   channel_id uint64   offer string    ConnectResponse Fields
   Name Type     answer string    StreamStateRequest Fields
   Name Type     guild_id uint64   channel_id uint64    StreamStateResponse Fields</description>
    </item>
    
    <item>
      <title>RESTful Endpoints</title>
      <link>https://harmonyapp.io/docs/rest/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://harmonyapp.io/docs/rest/</guid>
      <description>Authentication If an endpoint expects authentication, the user should set the Authorization header to a valid token from the hRPC API.
POST /_harmony/media/upload Expects authentication: yes
The body should be POST-ed as a multipart form (multipart/form-data), with a single part named file which contains the body of the file being uploaded.
URL Parameters    Name Description     filename The name of the file being uploaded.   contentType The MIME type of the file.</description>
    </item>
    
    <item>
      <title>RESTful Endpoints</title>
      <link>https://harmonyapp.io/protocol/rest/rest/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://harmonyapp.io/protocol/rest/rest/</guid>
      <description>Authentication If an endpoint expects authentication, the user should set the Authorization header to a valid token from the hRPC API.
POST /_harmony/media/upload Expects authentication: yes
The body should be POST-ed as a multipart form (multipart/form-data), with a single part named file which contains the body of the file being uploaded.
URL Parameters    Name Description     filename The name of the file being uploaded.   contentType The MIME type of the file.</description>
    </item>
    
    <item>
      <title>Server Name Resolution</title>
      <link>https://harmonyapp.io/docs/name-resolution/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://harmonyapp.io/docs/name-resolution/</guid>
      <description>Every Harmony homeserver is identified by a &amp;ldquo;server name.&amp;rdquo; A server name uniquely identifies a server, regardless of whether the resolved IP address changes or not. Two server names pointing to the same IP address would be considered two different homeservers.
A server name is resolved to an IP address and port using the following process:
When IP Address (xxx.xxx.xxx.xxx + optional :port) When the server name is an IP address, this is the resolved IP of the server that requests should be sent to.</description>
    </item>
    
    <item>
      <title>Server Name Resolution</title>
      <link>https://harmonyapp.io/protocol/name-resolution/name-resolution/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://harmonyapp.io/protocol/name-resolution/name-resolution/</guid>
      <description>Every Harmony homeserver is identified by a &amp;ldquo;server name.&amp;rdquo; A server name uniquely identifies a server, regardless of whether the resolved IP address changes or not. Two server names pointing to the same IP address would be considered two different homeservers.
A server name is resolved to an IP address and port using the following process:
When IP Address (xxx.xxx.xxx.xxx + optional :port) When the server name is an IP address, this is the resolved IP of the server that requests should be sent to.</description>
    </item>
    
  </channel>
</rss>
