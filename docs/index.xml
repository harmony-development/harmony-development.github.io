<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docs on Harmony</title>
    <link>https://harmonyapp.io/docs/</link>
    <description>Recent content in Docs on Harmony</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://harmonyapp.io/docs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Harmony FAQ</title>
      <link>https://harmonyapp.io/docs/faq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://harmonyapp.io/docs/faq/</guid>
      <description>What is Harmony? A chat protocol which:
 is split into communities which contain channels which contain messages is defined entirely within the Protobuf format, using a simple RPC mechanism called hRPC.  What are the design goals of Harmony? Harmony&amp;rsquo;s protocol is designed to be as straightforward and pragmatic as possible. We do not make attempts at creating a &amp;ldquo;universal&amp;rdquo; design philosophy which the entire protocol is forced to follow, instead implementing things that make sense as a single cohesive system.</description>
    </item>
    
    <item>
      <title>Permissions</title>
      <link>https://harmonyapp.io/docs/permissions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://harmonyapp.io/docs/permissions/</guid>
      <description>The permissions system of Harmony resembles that of the permissions system common to open-source Minecraft server software, featuring rules and querying a node string against those rules.
Permission In a community, there will be features, management functionality, bot commands, and other things which exist. Most of these actions have a permission associated with them, allowing you to control which members have access to each feature.
A permission is just a string, such as roles.</description>
    </item>
    
    <item>
      <title>Protocol Guidelines</title>
      <link>https://harmonyapp.io/docs/guidelines/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://harmonyapp.io/docs/guidelines/</guid>
      <description>Protocol endpoints adhere to the following standard naming conventions:
  All actions being applied must be prefixed.
❌ What not to do:
 rpc ProfileUpdate(ProfileUpdateRequest) returns (ProfileUpdateResponse) {}  ✅ What to do:
 rpc UpdateProfile(UpdateProfileRequest) returns (UpdateProfileResponse) {}    Objects (types that aren&amp;rsquo;t request or response types) should go at the top of the file.
  Objects should not be nested inside request or response types.</description>
    </item>
    
    <item>
      <title>Reference: google.protobuf</title>
      <link>https://harmonyapp.io/docs/google.protobuf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://harmonyapp.io/docs/google.protobuf/</guid>
      <description>Standalone Message Types FileDescriptorSet The protocol compiler can output a FileDescriptorSet containing the .proto files it parses.
Fields
file Type: repeated google.protobuf.FileDescriptorProto
 FileDescriptorProto Describes a complete .proto file.
Fields
name Type: optional string
package Type: optional string
dependency Type: repeated string
Names of files imported by this file.
public_dependency Type: repeated int32
Indexes of the public imported files in the dependency list above.
weak_dependency Type: repeated int32
Indexes of the weak imported files in the dependency list.</description>
    </item>
    
    <item>
      <title>Reference: protocol.auth.v1</title>
      <link>https://harmonyapp.io/docs/protocol.auth.v1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://harmonyapp.io/docs/protocol.auth.v1/</guid>
      <description>Services AuthService The service containing authorization/entication methods Fields
Federate protocol.auth.v1.FederateRequest -&amp;gt; protocol.auth.v1.FederateResponse
Federate with a foreignserver, obtaining a token you can use to call LoginFederated on it
 FederateRequest The request to federate with a foreign server.
Fields
server_id Type: optional string
The server ID foreign server you want to federate with
 FederateResponse The reply to a successful federation request, containing the token you need to present to the foreign server.</description>
    </item>
    
    <item>
      <title>Reference: protocol.batch.v1</title>
      <link>https://harmonyapp.io/docs/protocol.batch.v1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://harmonyapp.io/docs/protocol.batch.v1/</guid>
      <description>Services BatchService Service to batch requests. Fields
Batch protocol.batch.v1.BatchRequest -&amp;gt; protocol.batch.v1.BatchResponse
Batch requests. Does not support batching stream requests. Batched requests should be verified and an error should be thrown if they are invalid.
 BatchRequest Used in Batch endpoint.
Fields
requests Type: repeated protocol.batch.v1.AnyRequest
The list of requests to be executed in the batch.
 BatchResponse Used in Batch endpoint.
Fields
responses Type: repeated bytes
The list of responses to the requests.</description>
    </item>
    
    <item>
      <title>Reference: protocol.bots.v1</title>
      <link>https://harmonyapp.io/docs/protocol.bots.v1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://harmonyapp.io/docs/protocol.bots.v1/</guid>
      <description>Bot Invite Codes Bot invite codes work similarly to HMC URLs. They can either be server+code or just code, to refer to a bot on the current homeserver.
The format for an invite code is:
 [url[:port]/]code
 where code is a purely alphanumeric code.
Services BotsService The Bots service allows the management of bot accounts Fields
MyBots protocol.bots.v1.MyBotsRequest -&amp;gt; protocol.bots.v1.MyBotsResponse
Gets the list of bots that you own
 MyBotsRequest Request type for MyBots</description>
    </item>
    
    <item>
      <title>Reference: protocol.chat.v1</title>
      <link>https://harmonyapp.io/docs/protocol.chat.v1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://harmonyapp.io/docs/protocol.chat.v1/</guid>
      <description>Services ChatService The core of Harmony&amp;rsquo;s chat operations. Fields
CreateGuild protocol.chat.v1.CreateGuildRequest -&amp;gt; protocol.chat.v1.CreateGuildResponse
Endpoint to create a guild.
 CreateGuildRequest Request type used in CreateGuild endpoint.
Fields
name Type: optional string
The name of the guild.
picture Type: optional string
The picture HMC of the guild.
metadata Type: optional protocol.harmonytypes.v1.Metadata
Metadata of the guild.
 CreateGuildResponse Used in the CreateGuild endpoint.
Fields
guild_id Type: optional uint64
Guild ID of the guild that was created.</description>
    </item>
    
    <item>
      <title>Reference: protocol.emote.v1</title>
      <link>https://harmonyapp.io/docs/protocol.emote.v1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://harmonyapp.io/docs/protocol.emote.v1/</guid>
      <description>Services EmoteService Harmony&amp;rsquo;s Emote service manages the emotes and emote packs. Fields
CreateEmotePack protocol.emote.v1.CreateEmotePackRequest -&amp;gt; protocol.emote.v1.CreateEmotePackResponse
Endpoint to create an emote pack.
 CreateEmotePackRequest Used in the CreateEmotePack endpoint.
Fields
pack_name Type: optional string
the name of the pack.
 CreateEmotePackResponse Used in the CreateEmotePack endpoint.
Fields
pack_id Type: optional uint64
The ID of the pack.
 GetEmotePacks protocol.emote.v1.GetEmotePacksRequest -&amp;gt; protocol.emote.v1.GetEmotePacksResponse
Endpoint to get the emote packs you have equipped.</description>
    </item>
    
    <item>
      <title>Reference: protocol.harmonytypes.v1</title>
      <link>https://harmonyapp.io/docs/protocol.harmonytypes.v1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://harmonyapp.io/docs/protocol.harmonytypes.v1/</guid>
      <description>Standalone Message Types HarmonyMethodMetadata Metadata for methods. These are set in individual RPC endpoints and are typically used by servers.
Fields
requires_authentication Type: optional bool
whether the method requires authentication.
requires_local Type: optional bool
whether the method allows federation or not.
requires_permission_node Type: optional string
the permission nodes required to invoke the method.
requires_owner Type: optional bool
whether the method requires owner
 Anything Anything holds anything
Fields
kind Type: optional string</description>
    </item>
    
    <item>
      <title>Reference: protocol.mediaproxy.v1</title>
      <link>https://harmonyapp.io/docs/protocol.mediaproxy.v1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://harmonyapp.io/docs/protocol.mediaproxy.v1/</guid>
      <description>Services MediaProxyService Harmony service for fetching metadata and generating instant view for URLs. Fields
FetchLinkMetadata protocol.mediaproxy.v1.FetchLinkMetadataRequest -&amp;gt; protocol.mediaproxy.v1.FetchLinkMetadataResponse
Endpoint to fetch metadata for a URL.
 FetchLinkMetadataRequest Used in the FetchLinkMetadata endpoint.
Fields
url Type: optional string
URL to fetch metadata from.
 FetchLinkMetadataResponse Used in the FetchLinkMetadata endpoint.
Fields
is_site Type: optional protocol.mediaproxy.v1.SiteMetadata
Site metadata for the URL.
is_media Type: optional protocol.mediaproxy.v1.MediaMetadata
Media metadata for the URL.
 InstantView protocol.</description>
    </item>
    
    <item>
      <title>Reference: protocol.profile.v1</title>
      <link>https://harmonyapp.io/docs/protocol.profile.v1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://harmonyapp.io/docs/protocol.profile.v1/</guid>
      <description>Services ProfileService Harmony&amp;rsquo;s Profile service manages the profiles of the users. Fields
GetProfile protocol.profile.v1.GetProfileRequest -&amp;gt; protocol.profile.v1.GetProfileResponse
Gets a user&amp;rsquo;s profile.
 GetProfileRequest Used in GetProfile endpoint.
Fields
user_id Type: optional uint64
The id of the user to get.
 GetProfileResponse Used in GetProfile endpoint.
Fields
profile Type: optional protocol.profile.v1.Profile
The user&amp;rsquo;s profile
 UpdateProfile protocol.profile.v1.UpdateProfileRequest -&amp;gt; protocol.profile.v1.UpdateProfileResponse
Updates the user&amp;rsquo;s profile.
 UpdateProfileRequest Used in UpdateProfile endpoint.
Fields
new_user_name Type: optional string</description>
    </item>
    
    <item>
      <title>Reference: protocol.sync.v1</title>
      <link>https://harmonyapp.io/docs/protocol.sync.v1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://harmonyapp.io/docs/protocol.sync.v1/</guid>
      <description>Services PostboxService Postbox The postbox service forms the core of Harmony&amp;rsquo;s server &amp;lt;-&amp;gt; server communications.
It concerns the transfer of Events between servers, as well as ensuring reliable delivery of them.
The semantics of events are documented in the event types. The postbox service is solely reliable for reliable pushing and pulling.
Server Identification Servers are identified using their domain, and the port which they serve. This is called the &amp;ldquo;server ID&amp;rdquo;, and must be formatted as domain:port.</description>
    </item>
    
    <item>
      <title>Reference: protocol.voice.v1</title>
      <link>https://harmonyapp.io/docs/protocol.voice.v1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://harmonyapp.io/docs/protocol.voice.v1/</guid>
      <description>Services VoiceService Harmony service for facilitating voice operations using WebRTC.
Usage (for client) Call StreamMessage to be able to send RTC commands to server Send Initialize over stream with guild_id and channel_id of the request set to the channel you want to join Init device by using the RTP capabilities sent in the response message, which should be Initialized Send PrepareForJoinChannel over stream with client rtp capabilities Wait for PreparedForJoinChannel, which contains transport options Connect both transports using the transport options on client Send JoinChannel over stream containing RTP paramaters for your Audio track and DTLS paramaters for both consumer and producer Wait for JoinedChannel, which confirms you have successfully joined the voice channel; handle other_users which will be described in 8 (UserJoined handling) Handle UserJoined and UserLeft events appropiately   For UserJoined; use the received consumer ID, producer ID and RTP parameters on your consumer transport to consume the producer, afterwards send ResumeConsumer message with the consumer ID, then if that&amp;rsquo;s successful add the track to a user ID -&amp;gt; Track map For UserLeft, remove the user track from the user ID -&amp;gt; Track map  How this looks for servers Receives StreamMessage, starts the socket Waits for Initialize Sends Initialized over stream with it&amp;rsquo;s RTP capabilities Receives PrepareForJoinChannel with client RTP capabilities Sends PreparedForJoinChannel over stream with consumer and producer transport options Receives JoinChannel, checks for DTLS parameters for consumer and producer transports and uses the RTP paramaters to create a producer for the client Sends JoinedChannel over stream with the created producer ID and all other users&#39; data (UserData) When another user does 1 to 7, sends UserJoined over stream to all other users; when a user leaves the channel (when their stream ends), sends UserLeft to all other users When receiving a ResumeConsumer message, unpauses the consumer corresponding to the consumer ID Fields  StreamMessage streaming protocol.</description>
    </item>
    
    <item>
      <title>RESTful Endpoints</title>
      <link>https://harmonyapp.io/docs/rest/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://harmonyapp.io/docs/rest/</guid>
      <description>Authentication If an endpoint expects authentication, the user should set the Authorization header to a valid token from the hRPC API.
POST /_harmony/media/upload Expects authentication: yes
The body should be POST-ed as a multipart form (multipart/form-data), with a single part named file which contains the body of the file being uploaded, the name of the file and the MIME type of the file.
Responses 200 OK The body will contain a JSON object in the following format:</description>
    </item>
    
    <item>
      <title>Server Name Resolution</title>
      <link>https://harmonyapp.io/docs/name-resolution/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://harmonyapp.io/docs/name-resolution/</guid>
      <description>Every Harmony homeserver is identified by a &amp;ldquo;server name.&amp;rdquo; A server name uniquely identifies a server, regardless of whether the resolved IP address changes or not. Two server names pointing to the same IP address would be considered two different homeservers.
A server name is resolved to an IP address and port using the following process:
When IP Address (xxx.xxx.xxx.xxx + optional :port) When the server name is an IP address, this is the resolved IP of the server that requests should be sent to.</description>
    </item>
    
  </channel>
</rss>
