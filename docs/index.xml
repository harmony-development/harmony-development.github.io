<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docs on Harmony</title>
    <link>https://harmonyapp.io/docs/</link>
    <description>Recent content in Docs on Harmony</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://harmonyapp.io/docs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Harmony FAQ</title>
      <link>https://harmonyapp.io/docs/faq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://harmonyapp.io/docs/faq/</guid>
      <description>What is Harmony? A chat protocol which:
 is split into communities which contain channels which contain messages is defined entirely within the Protobuf format, using a simple RPC mechanism called hRPC.  What are the design goals of Harmony? Harmony&amp;rsquo;s protocol is designed to be as straightforward and pragmatic as possible. We do not make attempts at creating a &amp;ldquo;universal&amp;rdquo; design philosophy which the entire protocol is forced to follow, instead implementing things that make sense as a single cohesive system.</description>
    </item>
    
    <item>
      <title>Permissions</title>
      <link>https://harmonyapp.io/docs/permissions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://harmonyapp.io/docs/permissions/</guid>
      <description>The permissions system of Harmony resembles that of the permissions system common to open-source Minecraft server software, featuring rules and querying a node string against those rules.
Permission In a community, there will be features, management functionality, bot commands, and other things which exist. Most of these actions have a permission associated with them, allowing you to control which members have access to each feature.
A permission is just a string, such as roles.</description>
    </item>
    
    <item>
      <title>Protocol Guidelines</title>
      <link>https://harmonyapp.io/docs/guidelines/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://harmonyapp.io/docs/guidelines/</guid>
      <description>Protocol endpoints adhere to the following standard naming conventions:
  All actions being applied must be prefixed.
❌ What not to do:
 rpc ProfileUpdate(ProfileUpdateRequest) returns (ProfileUpdateResponse) {}  ✅ What to do:
 rpc UpdateProfile(UpdateProfileRequest) returns (UpdateProfileResponse) {}    Objects (types that aren&amp;rsquo;t request or response types) should go at the top of the file.
  Objects should not be nested inside request or response types.</description>
    </item>
    
    <item>
      <title>Reference: google.protobuf</title>
      <link>https://harmonyapp.io/docs/google.protobuf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://harmonyapp.io/docs/google.protobuf/</guid>
      <description>Standalone Message Types FileDescriptorSet The protocol compiler can output a FileDescriptorSet containing the .proto files it parses.
Fields
file Type: repeated google.protobuf.FileDescriptorProto
 FileDescriptorProto Describes a complete .proto file.
Fields
name Type: optional string
package Type: optional string
dependency Type: repeated string
Names of files imported by this file.
public_dependency Type: repeated int32
Indexes of the public imported files in the dependency list above.
weak_dependency Type: repeated int32
Indexes of the weak imported files in the dependency list.</description>
    </item>
    
    <item>
      <title>Reference: protocol.auth.v1</title>
      <link>https://harmonyapp.io/docs/protocol.auth.v1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://harmonyapp.io/docs/protocol.auth.v1/</guid>
      <description>Standalone Message Types Session Session Session contains the information for a new session; the user_id you logged in as and the session_token which should be passed to authorisation
Fields
user_id Type: optional uint64
user_id: the ID of the user you logged in as
session_token Type: optional string
session_token: the session token to use in authorization
 AuthStep AuthStep A step in the authentication process Contains a variety of different types of views It is recommended to have a fallback_url specified For non-trivial authentication procedures (such as captchas)</description>
    </item>
    
    <item>
      <title>Reference: protocol.batch.v1</title>
      <link>https://harmonyapp.io/docs/protocol.batch.v1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://harmonyapp.io/docs/protocol.batch.v1/</guid>
      <description>Standalone Message Types Services BatchService Service to batch requests. Fields
Batch protocol.batch.v1.BatchRequest -&amp;gt; protocol.batch.v1.BatchResponse
Batch requests. Does not support batching stream requests. Batched requests should be verified and an error should be thrown if they are invalid.
 BatchRequest Used in Batch endpoint.
Fields
requests Type: repeated protocol.batch.v1.AnyRequest
The list of requests to be executed in the batch.
 BatchResponse Used in Batch endpoint.
Fields
responses Type: repeated bytes
The list of responses to the requests.</description>
    </item>
    
    <item>
      <title>Reference: protocol.chat.v1</title>
      <link>https://harmonyapp.io/docs/protocol.chat.v1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://harmonyapp.io/docs/protocol.chat.v1/</guid>
      <description>Standalone Message Types Channel An object representing a channel, without the ID.
Fields
channel_name Type: optional string
The name of this channel.
kind Type: UNHANDLED | TYPE
The kind of channel this is. Data does not get inherently stored in the Channel type Instead, clients who understand a certain ChannelKind should fetch them from a separate RPC.
metadata Type: optional protocol.harmonytypes.v1.Metadata
The metadata of this channel.
 ChannelWithId The channel alongside with an ID.</description>
    </item>
    
    <item>
      <title>Reference: protocol.emote.v1</title>
      <link>https://harmonyapp.io/docs/protocol.emote.v1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://harmonyapp.io/docs/protocol.emote.v1/</guid>
      <description>Standalone Message Types EmotePack Data for a single pack of emotes.
Fields
pack_id Type: optional uint64
The ID of the pack.
pack_owner Type: optional uint64
The ID of the user who created the pack.
pack_name Type: optional string
The name of the pack.
 Emote Data for a single emote.
Fields
image_id Type: optional string
The image ID of the emote. This is the ID of the image in the image store (same place attachments are stored).</description>
    </item>
    
    <item>
      <title>Reference: protocol.harmonytypes.v1</title>
      <link>https://harmonyapp.io/docs/protocol.harmonytypes.v1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://harmonyapp.io/docs/protocol.harmonytypes.v1/</guid>
      <description>Standalone Message Types HarmonyMethodMetadata Metadata for methods. These are set in individual RPC endpoints and are typically used by servers.
Fields
requires_authentication Type: optional bool
whether the method requires authentication.
requires_local Type: optional bool
whether the method allows federation or not.
requires_permission_node Type: optional string
the permission nodes required to invoke the method.
requires_owner Type: optional bool
whether the method requires owner
 Anything Anything holds anything
Fields
kind Type: optional string</description>
    </item>
    
    <item>
      <title>Reference: protocol.mediaproxy.v1</title>
      <link>https://harmonyapp.io/docs/protocol.mediaproxy.v1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://harmonyapp.io/docs/protocol.mediaproxy.v1/</guid>
      <description>Standalone Message Types SiteMetadata Object representing the metadata of a website.
Fields
site_title Type: optional string
Title of the website.
page_title Type: optional string
Page title of the website page.
kind Type: optional string
Kind of the website.
description Type: optional string
Description of the website page.
url Type: optional string
URL of the website.
image Type: optional string
A thumbnail image of the website.
 MediaMetadata Object represeting the metadata of a media.</description>
    </item>
    
    <item>
      <title>Reference: protocol.profile.v1</title>
      <link>https://harmonyapp.io/docs/protocol.profile.v1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://harmonyapp.io/docs/protocol.profile.v1/</guid>
      <description>Standalone Message Types OverrideTag A tag for an override. This is used as a standard shorthand for sending a message with an override. If a message starts with before and ends with after, clients should send a message with the override the tag belongs to, stripping the tag indicators.
Fields
before Type: optional string
The portion of the tag before the messge.
after Type: optional string
The portion of the tag after the messge.</description>
    </item>
    
    <item>
      <title>Reference: protocol.sync.v1</title>
      <link>https://harmonyapp.io/docs/protocol.sync.v1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://harmonyapp.io/docs/protocol.sync.v1/</guid>
      <description>Standalone Message Types AuthData Authentication data that will be sent in a harmonytypes.v1.Token.
Fields
server_id Type: optional string
The server ID of the server initiating the transaction. For Pull, this tells the server being connected to which homeservers&#39; events it should send. For Push, this tells the server being connected to which homeservers&#39; events it is receiving.
time Type: optional uint64
The UTC UNIX time in seconds of when the request is started.</description>
    </item>
    
    <item>
      <title>Reference: protocol.voice.v1</title>
      <link>https://harmonyapp.io/docs/protocol.voice.v1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://harmonyapp.io/docs/protocol.voice.v1/</guid>
      <description>Standalone Message Types UserConsumerOptions Data containing all the necessary information to create a consumer for a user in a voice channel
This corresponds to https://mediasoup.org/documentation/v3/mediasoup-client/api/#ConsumerOptions on client:
 consumer_id -&amp;gt; id producer_id -&amp;gt; producerId rtp_parameters -&amp;gt; rtpParameters and kind should be set to &amp;ldquo;audio&amp;rdquo;.  Fields
user_id Type: optional uint64
User ID of the user.
producer_id Type: optional string
Producer ID of the producer being consumed.
consumer_id Type: optional string</description>
    </item>
    
    <item>
      <title>RESTful Endpoints</title>
      <link>https://harmonyapp.io/docs/rest/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://harmonyapp.io/docs/rest/</guid>
      <description>Authentication If an endpoint expects authentication, the user should set the Authorization header to a valid token from the hRPC API.
POST /_harmony/media/upload Expects authentication: yes
The body should be POST-ed as a multipart form (multipart/form-data), with a single part named file which contains the body of the file being uploaded, the name of the file and the MIME type of the file.
Responses 200 OK The body will contain a JSON object in the following format:</description>
    </item>
    
    <item>
      <title>Server Name Resolution</title>
      <link>https://harmonyapp.io/docs/name-resolution/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://harmonyapp.io/docs/name-resolution/</guid>
      <description>Every Harmony homeserver is identified by a &amp;ldquo;server name.&amp;rdquo; A server name uniquely identifies a server, regardless of whether the resolved IP address changes or not. Two server names pointing to the same IP address would be considered two different homeservers.
A server name is resolved to an IP address and port using the following process:
When IP Address (xxx.xxx.xxx.xxx + optional :port) When the server name is an IP address, this is the resolved IP of the server that requests should be sent to.</description>
    </item>
    
  </channel>
</rss>
